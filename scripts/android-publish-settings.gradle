afterEvaluate {
    apply(plugin: "maven-publish")

    tasks.withType(Javadoc).all {
        enabled = false
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        android.libraryVariants.all { variant ->
            if (variant.name == "release") {
                owner.classpath += variant.javaCompileProvider.get().classpath
            }
        }
        exclude '**/R.html', '**/R.*.html', '**/index.html'
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = "javadoc"
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = "sources"
        from android.sourceSets.main.java.srcDirs
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId(project.groupId)
                artifactId(project.artifactId)
                version = android.defaultConfig.versionName

                artifact(bundleReleaseAar)
                artifact(androidJavadocsJar)
                artifact(androidSourcesJar)

                pom.withXml {
                    final dependenciesNode = asNode().appendNode("dependencies")

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return

                        final dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", dep.group)
                        dependencyNode.appendNode("artifactId", dep.name)
                        dependencyNode.appendNode("version", dep.version)
                        dependencyNode.appendNode("scope", scope)

                        if (!dep.transitive) {
                            final exclusionNode = dependencyNode.appendNode("exclusions").appendNode("exclusion")
                            exclusionNode.appendNode("groupId", "*")
                            exclusionNode.appendNode("artifactId", "*")
                        } else if (!dep.properties.excludeRules.empty) {
                            final exclusionsNode = dependencyNode.appendNode("exclusions")
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                final exclusionNode = exclusionsNode.appendNode("exclusion")
                                exclusionNode.appendNode("groupId", rule.group ?: "*")
                                exclusionNode.appendNode("artifactId", rule.module ?: "*")
                            }
                        }
                    }

                    configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
    }
}